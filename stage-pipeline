pipeline {

     agent any
	
	 environment {
	 
	    appName    = "${APP_NAME}"            //name used for deployed app name in TIBCO TCI
		
		gvConfigUrl= "${APP_CONFIG_GIT_URL}"  //Global Variable config files base URL
		
		gvConfigAppName="${APP_CONFIG_NAME}"
		
		gitBranch= "master"
      
		stageAppProp = "app_stage.properties"
		
		appScaleCount= "${APP_SCALE_COUNT}"
		
		devAppName = "${APP_DEV_NAME}"
		
		devOrgName = "FSLDev"
		
	}
	
    stages {
	
        stage('Build') {
            steps {
                echo 'Building........... (No Build in this CICD release)'
            }
        }
		
		stage('artifacts'){
		   steps {
		   
				  echo '## checkout global variables ##'
				 
				  script {
						Boolean bool = fileExists 'cicdgvconfig'
						if(bool){
							bat('rmdir /Q /S cicdgvconfig')
						}else{
							bat('mkdir cicdgvconfig')
						}
				  }
				  
				  dir('cicdgvconfig'){ 
				    git url: gvConfigUrl, branch: gitBranch, credentialsId: 'git'	
				  }					
				  
				  script {
						Boolean bool = fileExists appName
						if(bool){
						   bat('rmdir /Q /S '+ appName)
						}
				  }

                  bat('mkdir ' + appName)	

				  echo ' coping manifest file '
				  
				  bat('copy ' + 'cicdgvconfig\\'+ gvConfigAppName+ '\\'+stageAppProp + '  '+appName+'\\'+stageAppProp)
				}
		}
        stage('Test') {
            steps {
                echo 'In this release No test execution task is implemented..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
				dir(appName){
					withCredentials([usernamePassword(credentialsId: 'tibcotci',usernameVariable: 'username',passwordVariable: 'password')])
					{
								 echo "USERNAME" + username + "PASSWORD" + password
								
								 bat('tibcli.exe login -u '+ username+ ' -p ' + password)    //login to dev to copy to stage
								 
								 echo ' ## Logged in to org' 
								 
								 bat('tibcli org current')
								 
								 bat('tibcli app delete '+ appName +'.staging --force')
								
								 	
								 
								 //check the app is already exists? If not exists create copy app from dev and update properties
								 // if exists create a staging app update properties and then replace with new.
								 
								 script {
									try{
									  
									   bat('tibcli app status ' + appName)
									   echo '## Application exists, so creating staging app and updating props then replace with exists one##'
									   bat('tibcli app copy '+ devAppName+ '  '+ appName	+'.staging  --impose')
									   bat('tibcli app configure ' + appName +'.staging' + ' -p '+ stageAppProp + ' -f')
									   bat('tibcli app replace ' + appName +'.staging' +  ' ' +appName + ' --impose')
									}catch(Exception e){
										bat('tibcli app copy '+ devAppName+ '  '+ appName	+' --impose')
										bat('tibcli app configure ' + appName + ' -p '+ stageAppProp + ' -f')
									}
								 }
								 bat('tibcli.exe logout')
					}
				}
            }
        }
    }
}